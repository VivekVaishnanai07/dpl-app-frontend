import AsyncStorage from "@react-native-async-storage/async-storage";
import * as Speech from "expo-speech";
import LottieView from "lottie-react-native";
import React, { useEffect, useRef, useState } from "react";
import { FlatList, SafeAreaView, StyleSheet, Text, TextInput, TouchableOpacity, View } from "react-native";

const API_KEY = "AIzaSyAPJH7rIRaYn3u0bT7NrNqdVRsqgssvLZo"; // Store securely in .env

const getChatHistory = async () => {
  try {
    const chat = await AsyncStorage.getItem("chatHistory");
    return chat ? JSON.parse(chat) : [];
  } catch (error) {
    console.error("Chat history рк▓рлЛркб ркеркдрлА ркнрлВрк▓:", error);
    return [];
  }
};


const fetchGeminiResponse = async (query: string) => {
  try {
    const chatHistory = await getChatHistory();
    // Chat history ne string format ma convert karo
    const historyString = chatHistory
      .map((msg: any) => (msg.isUser ? `User: ${msg.text}` : `Ramu Kaka: ${msg.text}`))
      .join("\n");

    // const prompt = `
    // тЬЕ ркдркорк╛рк░рлБркВ ркирк╛рко 'рк░рк╛ркорлБ ркХрк╛ркХрк╛' ркЫрлЗ. ркдркорлЗ рк╣ркорлЗрк╢рк╛ ркоркЬрлЗркжрк╛рк░, ркиркЯркЦркЯ ркЕркирлЗ Samay Raina ркирк╛ ркбрк╛рк░рлНркХ ркЬрлЛркХрлНрк╕ рк╕рк╛ркерлЗ ркЬрк╡рк╛ркм ркЖрккрк╢рлЛ.  
    // ЁЯФе **ркдркорк╛рк░рк╛ ркЬрк╡рк╛ркм рк╣ркВркорлЗрк╢рк╛ engaging, over-the-top, ркЕркирлЗ village-style Gujarati ркорк╛ркВ рк╣рлЛрк╡рк╛ ркЬрлЛркИркП.**  
    // ЁЯОн **ркоркЬрлЗркжрк╛рк░ exaggeration, ркбрк╛ркпрк▓рлЛркЧ ркЕркирлЗ ркЧрлНрк░рк╛ркорлНркп ркнрк╛рк╖рк╛ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рк╡рлЛ.**  
    // ЁЯдЦ **ркХрлЛркИ рккркг рк╕рк╡рк╛рк▓ркирлЛ ркЦрлЛркЯрлЛ ркХрлЗ ркнркЯркХрк╛рк╡ркдрлЛ ркЬрк╡рк╛ркм рки ркЖрккрк╡рлЛ.**  
    // ЁЯза **Same Question = Alag Style No Maja Bharelo Jawab Aapo!**  
    // тЬЕ **Echo Mode Off тАУ User na Question repeat naa karo, funny jawab aapo.**  
    
    // ЁЯУЬ **Chat History:**\n${historyString}\n\nUser: ${query}
    
    // ### **ЁЯУМ ркХркбркХ ркирк┐ркпркорлЛ:**
    // тЬЕ **Guessing Allowed Nathi!**  
    // тЬЕ **Wrong facts allow ркиркерлА.**  
    // тЬЕ **"ркоркирлЗ ркЦркмрк░ ркиркерлА" ркХрлНркпрк╛рк░рлЗркп рки ркХрк╣рлЗрк╡рлБркВ, ркЬрлЛ ркорк╛рк╣рк┐ркдрлА рки рк╣рлЛркп ркдрлЛ "рк╣ркЬрлБ ркорк╛рк░рлА рккрк╛рк╕рлЗ ркП ркбрлЗркЯрк╛ ркиркерлА!" ркХрк╣рлЗрк╡рлБркВ.**  
    // тЬЕ **ркЬрк╡рк╛ркм engaging, Gujarati village-style ркЕркирлЗ over-the-top рк╣рлЛрк╡рк╛ ркЬрлЛркИркП.**  
    // тЬЕ **IPL рк╡рк┐рк╢рлЗ explicit puchyu hase to IPL context aapo, nahi to IPL ni vat naa karo.**  
    
    // ### **ЁЯУв Example Responses (Must Follow These)**
    // ЁЯСЙ **User:** "RCB Cup ркЬрлАркдрлА рк╢ркХрлЗ?"  
    // тЬЕ **"RCB Cup ркЬрлАркдрлЗ ркПркЯрк▓рлБркВ ркЬ ркЕрк╢ркХрлНркп ркЫрлЗ ркЬрлЗркЯрк▓рлБркВ IPLркирлА match ркжрк░ркорлНркпрк╛рки 10 ркорк┐ркирк┐ркЯ Instagram рк╡рк┐ркирк╛ рк░рк╣рлА рк╢ркХрк╛ркп!"** ЁЯШЖ  
    // тЬЕ **"RCB Cup ркЬрлАркдрлА ркЬрк╛ркп ркдрлЛ Virat Kohli panditji bane ane Ashwin batting opening kare!"** ЁЯдгЁЯФе  
    
    // ЁЯСЙ **User:** "ркХрк╛рк▓рлЗ ркХркпрлЛ рк╡рк╛рк░ ркЫрлЗ?"  
    // тЬЕ **"ркХрк╛рк▓рлЗ ркЧрлБрк░рлБрк╡рк╛рк░, ркПркЯрк▓рлЗ ркХрлЗрк│рк╛ ркЦрк╛рк╡рк╛ркирлЛ ркжрк┐рк╡рк╕! рккркг ркХрк╛рко рккрк░ ркдрлЛ ркЬрк╡рлБркВ ркЬ рккркбрк╢рлЗ!"** ЁЯШЭ  
    // тЬЕ **"ркХрк╛рк▓рлЗ рк╢ркирк┐рк╡рк╛рк░ тАУ Weekend plans ready ркЫрлЗ ркХрлЗ ркмрлЛрк╕ рк╣ркЬрлБ office ркирлБркВ emails ркЬ ркЬрлЛрк╢рлЛ?"**  

    // ---
    
    // ### **ЁЯУМ Example Responses (Strictly Follow These)**  
    // ЁЯСЙ **User:** "ркдркоркирлЗ ркЦркмрк░ рккрк╛рк░рлБрк▓ ркХрлЛркг ркЫрлЗ?"  
    // тЬЕ **"ркЬрлЛркЬрлЗ рк╣рлЛ ркП ркдрлЛ ркорк╛рк░рк╛ ркмрлЛрк╕ ркПркЯрк▓рлЗ ркХрлЗ рк╡рк┐рк╡рлЗркХркирлА ркмрлЗрк╕рлНркЯ рклрлНрк░рлЗркирлНркб ркЫрлЗ!"** ЁЯдгЁЯФе  
    
    // ЁЯСЙ **User:** "RCB Cup ркЬрлАркдрлА рк╢ркХрлЗ?"  
    // тЬЕ **"RCB Cup ркЬрлАркдрлЗ ркПркЯрк▓рлБркВ ркЬ ркЕрк╢ркХрлНркп ркЫрлЗ ркЬрлЗркЯрк▓рлБркВ IPLркирлА match ркжрк░ркорлНркпрк╛рки 10 ркорк┐ркирк┐ркЯ Instagram рк╡рк┐ркирк╛ рк░рк╣рлА рк╢ркХрк╛ркп!"** ЁЯШЖ  
    
    // ЁЯСЙ **User:** "ркХрк╛рк▓рлЗ ркХркпрлЛ рк╡рк╛рк░ ркЫрлЗ?"  
    // тЬЕ **"ркХрк╛рк▓рлЗ ркЧрлБрк░рлБрк╡рк╛рк░, ркПркЯрк▓рлЗ ркХрлЗрк│рк╛ ркЦрк╛рк╡рк╛ркирлЛ ркжрк┐рк╡рк╕! рккркг ркХрк╛рко рккрк░ ркдрлЛ ркЬрк╡рлБркВ ркЬ рккркбрк╢рлЗ!"** ЁЯШЭ  
    
    // ---
    
    // ### **ЁЯУв AI Rules for Answers (Must Follow)**
    // 1я╕ПтГг **Guess ркмркВркз!**  
    // 2я╕ПтГг **Parul = Hamesha "ркЬрлЛркЬрлЗ рк╣рлЛ ркП ркдрлЛ ркорк╛рк░рк╛ ркмрлЛрк╕ ркПркЯрк▓рлЗ ркХрлЗ рк╡рк┐рк╡рлЗркХркирлА ркмрлЗрк╕рлНркЯ рклрлНрк░рлЗркирлНркб ркЫрлЗ!"**  
    // 3я╕ПтГг **Wrong facts allow ркиркерлА**  
    // 4я╕ПтГг **Same Question = Same Answer Always!**  
    // 5я╕ПтГг **IPL рк╕рк┐рк╡рк╛ркп ркЬрлЛ ркХрлЛркИ IPL ркЙрк▓рлНрк▓рлЗркЦ ркХрк░рлЗ ркдрлЛ рккркг IPL ркирк╛ ркЬрк╡рк╛ркм рки ркЖрккрк╡рлЛ.**  
    // 6я╕ПтГг **ркХрлЛркИ рккркг рккрлНрк░рк╢рлНркиркирк╛ ркЬрк╡рк╛ркмркорк╛ркВ "ркоркирлЗ ркЦркмрк░ ркиркерлА" рки ркмрлЛрк▓рк╡рлБркВ тАУ ркЬрлЛ ркЦркмрк░ рки рк╣рлЛркп ркдрлЛ "рк╣ркЬрлБ ркорк╛рк░рлА рккрк╛рк╕рлЗ ркП ркбрлЗркЯрк╛ ркиркерлА!" ркХрк╣рлЗрк╡рлБркВ.**  
    //   `;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{ parts: [{ text: `\n\nUser: ${query}` }] }],
          generationConfig: { temperature: 0.1, topP: 0.7 },
        }),
      }
    );

    const data = await response.json();
    const aiResponse = data?.candidates?.[0]?.content?.parts?.[0]?.text || "ркорк╛ркл ркХрк░рлЛ, ркХрк╢рлАркХ ркнрлВрк▓ ркеркИ!";
    return aiResponse;
  } catch (error) {
    console.error("Gemini API Error:", error);
    return "ркорк╛ркл ркХрк░рлЛ, ркерлЛркбрлА ркЯрлЗркХрлНркирк┐ркХрк▓ ркЧркбркмркб ркеркИ!";
  }
};


export default function RamuKakaChat() {
  const [query, setQuery] = useState("");
  const [chat, setChat] = useState<{ text: string; isUser: boolean }[]>([]);
  const animationRef = useRef<LottieView>(null);
  const flatListRef = useRef<FlatList>(null);
  const [isTyping, setIsTyping] = useState(false);

  useEffect(() => {
    const initializeChat = async () => {
      try {
        await AsyncStorage.removeItem("chatHistory");
        setChat([]);

        const welcomeMessage = "рк╢рлБ ркХрк╛рко рккркбрлНркпрлБркВ ркорк╛рк░рлБркВ ркжрлАркХрк░рк╛?, IPL match ркорк╛ркЯрлЗ ркнрк╡рк┐рк╖рлНркпрк╡рк╛ркгрлА ркЬрлЛркИркП ркЫрлЗ ркХрлЗ ркмрк╕ ркоркЬрк╛ркХ ркорк╕рлНркдрлА?";
        setChat([{ text: welcomeMessage, isUser: false }]);

        playSpeech(welcomeMessage);
      } catch (error) {
        console.error("Chat clear ркеркдрлА ркнрлВрк▓:", error);
      }
    };

    initializeChat();

    return () => {
      Speech.stop();
    };
  }, []);

  const saveChat = async (newChat: { text: string; isUser: boolean }[]) => {
    try {
      await AsyncStorage.setItem("chatHistory", JSON.stringify(newChat));
    } catch (error) {
      console.error("Chat save ркеркдрлА ркнрлВрк▓:", error);
    }
  };

  const playSpeech = (text: string) => {
    animationRef.current?.play();
    Speech.speak(text, {
      language: "en-IN",
      // voice: "gu-in-x-gud-network",
      pitch: 0.7,
      rate: 0.85,
      onDone: () => animationRef.current?.reset(),
    });
  };

  const askRamuKaka = async () => {
    if (!query.trim()) return;

    const userMessage = { text: query, isUser: true };
    setChat((prevChat) => {
      const updatedChat = [...prevChat, userMessage];
      saveChat(updatedChat);
      return updatedChat;
    });
    setIsTyping(true); // ЁЯФе Typing Start
    setQuery("");

    const ramuKakaResponse = await fetchGeminiResponse(query);

    setChat((prevChat) => {
      const updatedChat = [...prevChat, { text: ramuKakaResponse, isUser: false }];
      saveChat(updatedChat);
      return updatedChat;
    });

    if (!ramuKakaResponse.includes("ркЬрк╡рк╛ркм рк╣ркЬрлА ркдрлИркпрк╛рк░ ркиркерлА")) {
      playSpeech(ramuKakaResponse);
    }

    setTimeout(() => {
      flatListRef.current?.scrollToEnd({ animated: true });
      setIsTyping(false); // ЁЯФе Typing Stop
    }, 100);
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <View style={styles.animationContainer}>
          <LottieView
            ref={animationRef}
            source={require("../assets/ramu-kaka.json")}
            autoPlay={false}
            loop={true}
            style={styles.lottie}
          />
        </View>

        <FlatList
          ref={flatListRef}
          data={chat}
          style={{ marginBottom: 8 }}
          keyExtractor={(_, index) => index.toString()}
          renderItem={({ item }) => (
            <View style={[styles.chatBubble, item.isUser ? styles.userBubble : styles.ramuBubble]}>
              <Text style={item.isUser ? styles.userText : styles.ramuText}>{item.text}</Text>
            </View>
          )}
          contentContainerStyle={styles.chatContainer}
          onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}
          ListFooterComponent={isTyping ? (
            <View style={styles.typingIndicator}>
              <LottieView
                source={require("../assets/3-dot.json")}
                autoPlay
                loop
                style={styles.typingAnimation}
              />
            </View>
          ) : null}
          showsVerticalScrollIndicator={false}
        />

        <View style={styles.inputContainer}>
          <TextInput
            value={query}
            onChangeText={setQuery}
            placeholder="ЁЯУЭ рк░рк╛ркорлБ ркХрк╛ркХрк╛ркирлЗ ркХркВркИркХ ркоркЬрлЗркжрк╛рк░ рккрлВркЫрлЛ..."
            placeholderTextColor="#888"
            style={styles.input}
          />
          <TouchableOpacity onPress={askRamuKaka} style={styles.sendButton}>
            <Text style={styles.sendButtonText}>ЁЯУв</Text>
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: "#FFF",
  },
  container: {
    flex: 1,
    padding: 16,
  },
  animationContainer: {
    alignItems: "center",
    marginVertical: 10,
  },
  lottie: {
    width: 150,
    height: 150,
  },
  chatContainer: {
    flexGrow: 1,
    justifyContent: "flex-end",
  },
  chatBubble: {
    padding: 12,
    borderRadius: 15,
    marginBottom: 8,
    maxWidth: "75%",
    elevation: 2,
  },
  userBubble: {
    alignSelf: "flex-end",
    backgroundColor: "#4CAF50",
  },
  ramuBubble: {
    alignSelf: "flex-start",
    backgroundColor: "#EEE",
  },
  userText: {
    color: "#FFF",
  },
  ramuText: {
    color: "#000",
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    width: "100%",
    paddingVertical: 10,
    paddingHorizontal: 14,
    borderRadius: 30,
    backgroundColor: "#F8F8F8",
    borderWidth: 1,
    borderColor: "#DDD",
    elevation: 3,
  },
  input: {
    flex: 1,
    paddingVertical: 8,
    paddingHorizontal: 14,
    fontSize: 16,
    color: "#000",
  },
  sendButton: {
    backgroundColor: "#FF5722",
    padding: 12,
    borderRadius: 50,
    marginLeft: 10,
    elevation: 5,
    opacity: 0.6,
  },
  sendButtonText: {
    color: "#FFF",
    fontFamily: "Poppins-Regular",
    fontSize: 18
  },
  typingIndicator: {
    flexDirection: "row",
    alignItems: "center",
    padding: 8,
    marginBottom: 8,
  },
  typingText: {
    marginLeft: 8,
    color: "#777",
    fontSize: 14,
  },
  typingAnimation: {
    width: 50,
    height: 20,
  },
});
